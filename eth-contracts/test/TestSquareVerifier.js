// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

// Test verification with incorrect proof
var verifier = artifacts.require("verifier");
var correctSolution = require("../../zokrates/code/square/proofs/proof_1.json");

contract("TestVerifier", (accounts) => {
  const account_one = accounts[0];

  describe("Verifier", function () {
    beforeEach(async function () {
      this.contract = await verifier.new({
        from: account_one,
      });
    });

    it("should verify correct solution", async function () {
      let result = await this.contract.verifyTx.call(
        correctSolution.proof.A,
        correctSolution.proof.A_p,
        correctSolution.proof.B,
        correctSolution.proof.B_p,
        correctSolution.proof.C,
        correctSolution.proof.C_p,
        correctSolution.proof.H,
        correctSolution.proof.K,
        correctSolution.input
      );
      assert.equal(result, true, "Valid solution was not verified")
    });

    it("should not verify incorrect solution", async function () {
      let incorrectSolution = JSON.parse(JSON.stringify(correctSolution));;
      incorrectSolution.proof.A_p = correctSolution.proof.B_p;
      let result = await this.contract.verifyTx(
        incorrectSolution.proof.A,
        incorrectSolution.proof.A_p,
        incorrectSolution.proof.B,
        incorrectSolution.proof.B_p,
        incorrectSolution.proof.C,
        incorrectSolution.proof.C_p,
        incorrectSolution.proof.H,
        incorrectSolution.proof.K,
        incorrectSolution.input
      );
      assert.equal(result.logs.length, 0, "Incorrect solution was verified");
    });
  });
});
